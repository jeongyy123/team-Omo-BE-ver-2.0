generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Users {
  userId    Int      @id @default(autoincrement()) @map("userId")
  email     String   @map("email")
  password  String   @map("password")
  nickname  String   @map("nickname")
  imgUrl    String   @map("imgUrl")
  snsId     String?  @map("snsId")
  provider  String?  @map("provider")
  createdAt DateTime @default(now()) @map("createdAt")
  updatedAt DateTime @updatedAt @map("updatedAt")

  Posts         Posts[]
  Comments      Comments[]
  Likes         Likes[]
  Bookmark      Bookmark[]
  RefreshTokens RefreshTokens[]
  // Location      Locations[]
  Replies       Replies[]

  @@map("Users")
}

model VerificationCode {
  verificationCodeId Int      @id @default(autoincrement()) @map("codeId")
  email              String   @map("email")
  verificationCode   Int      @map("verificationCode")
  expiryDate         DateTime @map("expiryDate")

  @@map("VerificationCode")
}

model RefreshTokens {
  tokenId      Int      @id @default(autoincrement()) @map("tokenId")
  UserId       Int      @map("UserId")
  refreshToken String   @map("refreshToken")
  expiresAt    DateTime @map("expiresAt")
  createdAt    DateTime @default(now()) @map("createdAt")

  User Users @relation(fields: [UserId], references: [userId], onDelete: Cascade)

  @@map("RefreshTokens")
}

model Posts {
  postId       Int      @id @default(autoincrement()) @map("postId")
  UserId       Int      @map("UserId")
  CategoryId   Int      @map("CategoryId")
  LocationId   Int      @map("LocationId")
  content      String   @map("content") @db.Text
  imgUrl       String   @map("imgUrl") @db.Text
  likeCount    Int      @default(0) @map("likeCount")
  commentCount Int      @default(0) @map("commentCount")
  star         Int      @map("star")
  createdAt    DateTime @default(now()) @map("createdAt")
  updatedAt    DateTime @updatedAt @map("updatedAt")

  User     Users      @relation(fields: [UserId], references: [userId], onDelete: Cascade)
  Category Categories @relation(fields: [CategoryId], references: [categoryId], onDelete: Cascade)
  Location Locations  @relation(fields: [LocationId], references: [locationId], onDelete: Cascade)
  Comments Comments[]
  Likes    Likes[]
  PostHashtags PostHashtags[]

  @@map("Posts")
}

model Comments {
  commentId  Int      @id @default(autoincrement()) @map("commentId")
  UserId     Int      @map("UserId")
  PostId     Int      @map("PostId")
  content    String   @map("content")
  replyCount Int      @default(0) @map("replyCount")
  createdAt  DateTime @default(now()) @map("createdAt")

  Post Posts @relation(fields: [PostId], references: [postId], onDelete: Cascade)
  User Users @relation(fields: [UserId], references: [userId], onDelete: Cascade)

  Replies Replies[]

  @@map("Comments")
}

model Bookmark {
  bookmarkId Int      @id @default(autoincrement()) @map("bookmarkId")
  UserId     Int      @map("UserId")
  LocationId Int      @map("LocationId")
  createdAt  DateTime @default(now()) @map("createdAt")

  User     Users     @relation(fields: [UserId], references: [userId], onDelete: Cascade)
  Location Locations @relation(fields: [LocationId], references: [locationId], onDelete: Cascade)

  @@map("Bookmark")
}

model Categories {
  categoryId   Int    @id @default(autoincrement()) @map("categoryId")
  categoryName String @map("categoryName")

  Posts     Posts[]
  Locations Locations[]

  @@map("Categories")
}

model Locations {
  locationId  Int     @id @default(autoincrement()) @map("locationId")
  CategoryId  Int     @map("CategoryId")
  DistrictId  Int     @map("DistrictId")
  // UserId      Int     @map("UserId")
  storeName   String  @map("storeName")
  address     String  @map("address")
  latitude    String  @map("latitude")
  longitude   String  @map("longitude")
  starAvg     Int     @map("starAvg")
  postCount   Int     @default(0) @map("postCount")
  placeInfoId String? @map("placeInfoId") 

  Category Categories @relation(fields: [CategoryId], references: [categoryId], onDelete: Cascade)
  District Districts  @relation(fields: [DistrictId], references: [districtId], onDelete: Cascade)
  // User     Users      @relation(fields: [UserId], references: [userId], onDelete: Cascade)

  Posts    Posts[]
  Bookmark Bookmark[]

  @@map("Locations")
}

model Likes {
  likeId Int @id @default(autoincrement()) @map("likeId")
  UserId Int @map("UserId")
  PostId Int @map("PostId")

  User Users @relation(fields: [UserId], references: [userId], onDelete: Cascade)
  Post Posts @relation(fields: [PostId], references: [postId], onDelete: Cascade)

  @@map("Likes")
}

model Districts {
  districtId   Int    @id @default(autoincrement()) @map("districtId")
  districtName String @map("districtName")

  Location Locations[]

  @@map("Districts")
}

model TokenBlacklist {
  id            Int      @id @default(autoincrement()) @map("id")
  token         String   @map("token")
  invalidatedAt DateTime @default(now()) @map("invalidatedAt")

  @@map("TokenBlacklist")
}

model Replies {
  replyId   Int      @id @default(autoincrement()) @map("replyId")
  UserId    Int      @map("UserId")
  CommentId Int      @map("CommentId")
  content   String   @map("content")
  createdAt DateTime @default(now()) @map("createdAt")

  User    Users    @relation(fields: [UserId], references: [userId], onDelete: Cascade)
  Comment Comments @relation(fields: [CommentId], references: [commentId], onDelete: Cascade)

  @@map("Replies")
}

model Follows {
  followsId   Int  @id @default(autoincrement()) @map("followsId")
  userFromId  Int  @map("userFromId")
  userToId    Int  @map("userToId")

  @@map("Follows")
}

model Hashtags {
  hashtagId     Int     @id @default(autoincrement()) @map("hashtagId")
  hashtagName   String  @map("hashtagName")

  PostHashtags PostHashtags[]

  @@map("Hashtags")
}

model PostHashtags {
  postHashtagId  Int  @id @default(autoincrement()) @map("postHashtagId")
  PostId         Int  @map("PostId")
  HashtagId      Int  @map("HashtagId")

  Post    Posts    @relation(fields: [PostId], references: [postId], onDelete: Cascade)
  Hashtag Hashtags @relation(fields: [HashtagId], references: [hashtagId], onDelete: Cascade)

  @@map("PostHashtags")
}